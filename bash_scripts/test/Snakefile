# Rule to run RFdiffusion and produce multiple .pdb files
rule run_rfdiffusion:
    output: expand("binders/{prefix}-binders_{number}.pdb", prefix="{prefix}", number=[0, 1])  # Adjust numbers as needed
    input: "{prefix}.pdb"
    shell:
        """
	#source $HOME/.bashrc
        bash test_design_protein_binders.sh
        """

# Rule look in binders directory. Shell will only be invoked if last pdb is there
rule run_silent:
    output: "{prefix}_silent.silent"
    input: 
        pdb_files=expand("binders/{prefix}-binders_{number}.pdb", prefix="{prefix}", number=[0, 1])
    params: 
        prefix=lambda wildcards: wildcards.prefix
           
    run:
        import time
        from pathlib import Path
        
        last_file = Path(f"binders/{params.prefix}-binders_1.pdb")
        while not last_file.is_file():
            print("Waiting for RFdiffusion to finish...")
            time.sleep(60)  # Waits 10 seconds before checking again

        # Once the file is found, run the shell command
        shell("silentfrompdbs binders/*.pdb > {output}")

# Remaining rules follow as defined
rule run_mpnn:
    output: "{prefix}_mpnn.silent"
    input: "{prefix}_silent.silent"
    shell:
        """
        source $HOME/anaconda/etc/profile.d/conda.sh
        conda activate proteinmpnn_binder_design
        dl_interface_design.py -silent {input} -outsilent {output}
        """

rule run_af2:
    output: "{prefix}_af2.silent"
    input: "{prefix}_mpnn.silent"
    shell:
        """
        conda activate af2_binder_design
        predict.py -silent {input} -outsilent {output}
        """

rule convert2pdb:
    output: "{prefix}_{name}_af2pred.pdb"
    input: "{prefix}_af2.silent"
    shell: "silentextract {input} > {output}"
